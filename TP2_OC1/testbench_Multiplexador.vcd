$date
	Sat Jul  2 13:53:16 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench_Multiplexador $end
$var wire 16 ! out [15:0] $end
$var reg 1 " Iselect $end
$var reg 1 # Rselect $end
$var reg 16 $ r0 [15:0] $end
$var reg 16 % r1 [15:0] $end
$var reg 16 & r2 [15:0] $end
$var reg 16 ' r3 [15:0] $end
$var reg 16 ( r4 [15:0] $end
$var reg 16 ) r5 [15:0] $end
$var reg 16 * r6 [15:0] $end
$var reg 16 + r7 [15:0] $end
$var reg 5 , regNumSelect [4:0] $end
$var reg 16 - regR [15:0] $end
$var reg 16 . signExt [15:0] $end
$scope module multiplexador $end
$var wire 1 / Iselect $end
$var wire 1 0 Rselect $end
$var wire 16 1 out [15:0] $end
$var wire 16 2 r0 [15:0] $end
$var wire 16 3 r1 [15:0] $end
$var wire 16 4 r2 [15:0] $end
$var wire 16 5 r3 [15:0] $end
$var wire 16 6 r4 [15:0] $end
$var wire 16 7 r5 [15:0] $end
$var wire 16 8 r6 [15:0] $end
$var wire 16 9 r7 [15:0] $end
$var wire 5 : regNumSelect [4:0] $end
$var wire 16 ; regR [15:0] $end
$var wire 16 < signExt [15:0] $end
$var reg 16 = aux [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
x0
x/
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
x#
x"
bx !
$end
#1
b11 =
b11 !
b11 1
b11 ,
b11 :
b111 +
b111 9
b110 *
b110 8
b101 )
b101 7
b100 (
b100 6
b11 '
b11 5
b10 &
b10 4
b1 %
b1 3
b0 $
b0 2
#2
b1001 =
b1001 !
b1001 1
1#
10
b1001 -
b1001 ;
b0xxx ,
b0xxx :
#3
b1111111111 =
b1111111111 !
b1111111111 1
1"
1/
b1111111111 .
b1111111111 <
x#
x0
b0xxxx ,
b0xxxx :
#4
